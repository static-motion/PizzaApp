// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaApp.Data;

#nullable disable

namespace PizzaApp.Data.Migrations
{
    [DbContext(typeof(PizzaAppContext))]
    [Migration("20250723135615_ShoppingCartPizzaComponentsJsonMadeNullable")]
    partial class ShoppingCartPizzaComponentsJsonMadeNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key unique identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("First address line.");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Second address line. Can be null.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The city where the address is located at.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if the address has been soft deleted.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key to Users table - User who is associated with this address.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", t =>
                        {
                            t.HasComment("All the addresses as created by the Users.");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Dessert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key unique identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Short description of the dessert.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("URL for the image of the dessert.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if the entity is active.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the dessert");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)")
                        .HasComment("Current price of the dessert.");

                    b.HasKey("Id");

                    b.ToTable("Desserts", t =>
                        {
                            t.HasComment("All the desserts offered.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Rich cheesecake with blueberry jam! We could eat this all day!",
                            IsDeleted = false,
                            Name = "Cheesecake",
                            Price = 5m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Home baked with our special dough recipe and luxurious dark chocolate! Yum!",
                            IsDeleted = false,
                            Name = "Chocolate Brownie",
                            Price = 5m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Home is where the heart is. Or where the best apple pie is. We're still not sure...",
                            IsDeleted = false,
                            Name = "Apple Pie",
                            Price = 6m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Vanilla Ice Cream. Strawberry syrup. Need we say more?",
                            IsDeleted = false,
                            Name = "Vanilla Strawberry Ice Cream",
                            Price = 5m
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Dough", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Dough description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if the entity is active.");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)")
                        .HasComment("Dough price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Dough type");

                    b.HasKey("Id");

                    b.ToTable("Doughs", t =>
                        {
                            t.HasComment("All the dough types used for making pizzas.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Our classic white dough recipe everyone knows and loves!",
                            IsDeleted = false,
                            Price = 7.5m,
                            Type = "White"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Our special gluten-free dough!",
                            IsDeleted = false,
                            Price = 7.5m,
                            Type = "Gluten-free"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Our wholegrain dough packs additional fiber and protein for you fitness freaks out there!",
                            IsDeleted = false,
                            Price = 7.5m,
                            Type = "Wholegrain"
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasComment("Short description of the drink.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("URL for the image of the drink.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if the entity is active.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the drink.");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)")
                        .HasComment("Current Price of the drink.");

                    b.HasKey("Id");

                    b.ToTable("Drinks", t =>
                        {
                            t.HasComment("All the drinks offered.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The refreshing original taste of Coca Cola!",
                            IsDeleted = false,
                            Name = "Coca Cola 500ml",
                            Price = 3m
                        },
                        new
                        {
                            Id = 2,
                            Description = "The classic orange Fanta!",
                            IsDeleted = false,
                            Name = "Fanta 500ml",
                            Price = 3m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Who can say no to a pizza and sprite combo?",
                            IsDeleted = false,
                            Name = "Sprite 500ml",
                            Price = 3m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Salty and delicious - the perfect drink for a hearty lunch!",
                            IsDeleted = false,
                            Name = "Ayran 1L",
                            Price = 2.5m
                        },
                        new
                        {
                            Id = 5,
                            Description = "100% flavor, 0 calories! Sounds like a bargain to us!",
                            IsDeleted = false,
                            Name = "Coca Cola Zero 500ml",
                            Price = 3m
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.OrderDessert", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key to Orders, part of composite Primary Key.");

                    b.Property<int>("DessertId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to Desserts, part of composite Primary Key.");

                    b.Property<decimal>("PricePerItemAtPurchase")
                        .HasColumnType("decimal(8,2)")
                        .HasComment("Price of the pizza at the time of purchase, used for total price calculations.");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Dessert quantity ordered.");

                    b.HasKey("OrderId", "DessertId");

                    b.HasIndex("DessertId");

                    b.ToTable("OrdersDesserts", t =>
                        {
                            t.HasComment("A many-to-many mapping entity used to show which desserts appear in which orders.");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.OrderDrink", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key to Orders, part of composite Primary Key.");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to Drinks, part of composite Primary Key.");

                    b.Property<decimal>("PricePerItemAtPurchase")
                        .HasColumnType("decimal(8,2)")
                        .HasComment("Price of the drink at the time of purchase, used for total price calculations.");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Ordered drink quantity");

                    b.HasKey("OrderId", "DrinkId");

                    b.HasIndex("DrinkId");

                    b.ToTable("OrdersDrinks", t =>
                        {
                            t.HasComment("A many-to-many mapping entity used to show which drinks appear in which orders.");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.OrderPizza", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key to Orders. Shows which Order this pizza was used in.");

                    b.Property<int>("BasePizzaId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to Pizzas. This points to the original pizza the OrderPizza was based on.");

                    b.Property<int>("DoughId")
                        .HasColumnType("int")
                        .HasComment("Dough used for this specific order pizza");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("Primary Key for OrderPizza. ");

                    b.Property<decimal>("PricePerItemAtPurchase")
                        .HasColumnType("decimal(8,2)")
                        .HasComment("Price of the pizza at the time of purchase, used for total price calculations.");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of pizzas in the order.");

                    b.Property<int?>("SauceId")
                        .HasColumnType("int")
                        .HasComment("Sauce used for this specific order Pizza. Can be null.");

                    b.HasKey("OrderId", "BasePizzaId");

                    b.HasIndex("BasePizzaId");

                    b.HasIndex("DoughId");

                    b.HasIndex("SauceId");

                    b.ToTable("OrdersPizzas", t =>
                        {
                            t.HasComment("A many-to-many mapping entity used to show which pizzas appear in which orders. ");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.OrderPizzaTopping", b =>
                {
                    b.Property<int>("OrderPizzaId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to OrderPizzas, part of composite Primary Key.");

                    b.Property<int>("ToppingId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to Toppings, part of composite Primary Key.");

                    b.Property<int>("OrderPizzaBasePizzaId")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderPizzaOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasColumnType("decimal(8,2)")
                        .HasComment("Price of the topping at the time of purchase");

                    b.HasKey("OrderPizzaId", "ToppingId");

                    b.HasIndex("ToppingId");

                    b.HasIndex("OrderPizzaOrderId", "OrderPizzaBasePizzaId");

                    b.ToTable("OrderPizzaTopping", t =>
                        {
                            t.HasComment("Toppings for a specific pizza in an order");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.PizzaTopping", b =>
                {
                    b.Property<int>("ToppingId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to Toppings, part of composite Primary Key.");

                    b.Property<int>("PizzaId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to Pizzas, part of composite Primary Key.");

                    b.HasKey("ToppingId", "PizzaId");

                    b.HasIndex("PizzaId");

                    b.ToTable("PizzasToppings", t =>
                        {
                            t.HasComment("A many-to-many mapping entity between Pizza and Toppings, used to show which toppings are contained in which pizzas.");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.ShoppingCartDessert", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int>("DessertId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ShoppingCartId", "DessertId");

                    b.HasIndex("DessertId");

                    b.ToTable("ShoppingCartsDesserts");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.ShoppingCartDrink", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ShoppingCartId", "DrinkId");

                    b.HasIndex("DrinkId");

                    b.ToTable("ShoppingCartsDrinks");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.UserPizza", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key to Users");

                    b.Property<int>("PizzaId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to Pizzas");

                    b.HasKey("UserId", "PizzaId");

                    b.HasIndex("PizzaId");

                    b.ToTable("UsersPizzas", t =>
                        {
                            t.HasComment("A many-to-many mapping entity between User and Pizza, showing pizza entities which have been marked as favorite by users");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary Key unique identifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to Addresses - location where the order was supposed to be delivered.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time at which the order was created.");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int")
                        .HasComment("Current status of the order.");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasComment("Price of the order.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key to Users - the user who made the order.");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("All the users' orders in the database.");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key unique identifier.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign Key to User who created the pizza.");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Short pizza description");

                    b.Property<int>("DoughId")
                        .HasColumnType("int")
                        .HasComment("The type of dough the pizza is made with.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("URL of the image of the pizza.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if the pizza has been soft deleted.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the pizza as given by its creator (User)");

                    b.Property<int>("PizzaType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("SauceId")
                        .HasColumnType("int")
                        .HasComment("The sauce used on the pizza. Can be null.");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DoughId");

                    b.HasIndex("SauceId");

                    b.ToTable("Pizzas", t =>
                        {
                            t.HasComment("All pizzas offered - both admin and user created.");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Short sauce description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if the entity is active.");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)")
                        .HasComment("Current sauce price");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Sauce type (tomato, pesto etc.)");

                    b.HasKey("Id");

                    b.ToTable("Sauces", t =>
                        {
                            t.HasComment("All the sauces offered.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Our signature tomato sauce with a special blend of herbs and spices that everyone knows and loves!",
                            IsDeleted = false,
                            Price = 1m,
                            Type = "Tomato"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Heavy cream sauce for rich and creamy pizzas. Did we mention it's very creamy?",
                            IsDeleted = false,
                            Price = 1m,
                            Type = "Cream"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Our custom made BBQ sauce with rich sweet and smokey aromas. Perfect for meaty pizzas!",
                            IsDeleted = false,
                            Price = 1m,
                            Type = "BBQ"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Olive oil, basil and garlic. We DARE you to think of a better flavor combination!",
                            IsDeleted = false,
                            Price = 1m,
                            Type = "Pesto"
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.ShoppingCartPizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasePizzaId")
                        .HasColumnType("int")
                        .HasComment("Foreign Key to base Pizza");

                    b.Property<string>("PizzaComponentsJson")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("JSON serialized pizza data");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasComment("Calculated price including customizations");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Quantity of this item in cart");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasePizzaId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartsPizzas", t =>
                        {
                            t.HasComment("Items in user's shopping cart");
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary Key unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("A short description of the pizza topping.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if the entity is active.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the pizza topping");

                    b.Property<decimal>("Price")
                        .HasPrecision(6, 2)
                        .HasColumnType("decimal(6,2)")
                        .HasComment("Current price of the pizza topping");

                    b.Property<int>("ToppingCategoryId")
                        .HasColumnType("int")
                        .HasComment("Foreign key to topping categories, shows which category the topping belongs to (meats, veggies etc.)");

                    b.HasKey("Id");

                    b.HasIndex("ToppingCategoryId");

                    b.ToTable("Toppings", t =>
                        {
                            t.HasComment("All the toppings offered.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A spicy, cured Italian-American sausage with a bold, savory flavor and a slightly crispy texture when baked.",
                            IsDeleted = false,
                            Name = "Pepperoni",
                            Price = 1m,
                            ToppingCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Smoky, crispy and irresistibly delicious, bacon makes everything better - especially pizza!",
                            IsDeleted = false,
                            Name = "Bacon",
                            Price = 1m,
                            ToppingCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Spicy, smoky Spanish sausage that kicks pizza up a notch - a flavor fiesta in every bite.",
                            IsDeleted = false,
                            Name = "Chorizo",
                            Price = 1m,
                            ToppingCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Creamy, melty, stretchy perfection. Pizza without mozzarella is just sad bread.",
                            IsDeleted = false,
                            Name = "Mozzarella",
                            Price = 1m,
                            ToppingCategoryId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sharp, tangy, and gloriously gooey. Cheddar brings a bold twist to pizza that basic cheeses can't match.",
                            IsDeleted = false,
                            Name = "Cheddar",
                            Price = 1m,
                            ToppingCategoryId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Salty, nutty, and irresistibly savory. Parmesan is the finishing touch that elevates pizza from good to gourmet.",
                            IsDeleted = false,
                            Name = "Parmesan",
                            Price = 1m,
                            ToppingCategoryId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Velvety, indulgent, and irresistibly smooth. Philadelphia cheese turns pizza into a decadent delight.",
                            IsDeleted = false,
                            Name = "Philadelphia",
                            Price = 1m,
                            ToppingCategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "Nature’s way of saying, ‘Yeah, this pizza needed more color.’",
                            IsDeleted = false,
                            Name = "Bell Peppers",
                            Price = 1m,
                            ToppingCategoryId = 3
                        },
                        new
                        {
                            Id = 9,
                            Description = "The pizza topping that makes vegetarians and carnivores high-five!",
                            IsDeleted = false,
                            Name = "Mushrooms",
                            Price = 1m,
                            ToppingCategoryId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "Pizza’s way of keeping first dates interesting.",
                            IsDeleted = false,
                            Name = "Onions",
                            Price = 1m,
                            ToppingCategoryId = 3
                        },
                        new
                        {
                            Id = 11,
                            Description = "Tiny, salty, and judging you for picking them off.",
                            IsDeleted = false,
                            Name = "Olives",
                            Price = 1m,
                            ToppingCategoryId = 3
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.ToppingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Unique identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if the entity is active.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Topping type name");

                    b.HasKey("Id");

                    b.ToTable("ToppingCategories", t =>
                        {
                            t.HasComment("The topping categories offered by the pizza app (meats, veggies etc.)");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Meats"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Cheeses"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Vegetables"
                        });
                });

            modelBuilder.Entity("PizzaApp.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ShoppingCartId")
                        .IsUnique()
                        .HasFilter("[ShoppingCartId] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("The general public website user. This entity has addresses, created pizzas, favorited pizzas and order associated with it.");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Address", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.OrderDessert", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Dessert", "Dessert")
                        .WithMany("Orders")
                        .HasForeignKey("DessertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.Order", "Order")
                        .WithMany("OrderDeserts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dessert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.OrderDrink", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Drink", "Drink")
                        .WithMany("OrdersDrinks")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.Order", "Order")
                        .WithMany("OrderDrinks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.OrderPizza", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Pizza", "BasePizza")
                        .WithMany("Orders")
                        .HasForeignKey("BasePizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.Dough", "Dough")
                        .WithMany("DoughOrders")
                        .HasForeignKey("DoughId");

                    b.HasOne("PizzaApp.Data.Models.Order", "Order")
                        .WithMany("OrderPizzas")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.Sauce", "Sauce")
                        .WithMany("SauceOrders")
                        .HasForeignKey("SauceId");

                    b.Navigation("BasePizza");

                    b.Navigation("Dough");

                    b.Navigation("Order");

                    b.Navigation("Sauce");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.OrderPizzaTopping", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.MappingEntities.OrderPizza", null)
                        .WithMany("Toppings")
                        .HasForeignKey("OrderPizzaOrderId", "OrderPizzaBasePizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.PizzaTopping", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Pizza", "Pizza")
                        .WithMany("Toppings")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.Topping", "Topping")
                        .WithMany("PizzasToppings")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.ShoppingCartDessert", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Dessert", "Dessert")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("DessertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Desserts")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dessert");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.ShoppingCartDrink", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Drink", "Drink")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Drinks")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.UserPizza", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Pizza", "Pizza")
                        .WithMany("FavoritedBy")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.User", "User")
                        .WithMany("FavoritePizzas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pizza");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Order", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Address", "DeliveryAddress")
                        .WithMany("Deliveries")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.User", "User")
                        .WithMany("OrderHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Pizza", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.User", "Creator")
                        .WithMany("CreatedPizzas")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.Dough", "Dough")
                        .WithMany("Pizzas")
                        .HasForeignKey("DoughId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.Sauce", "Sauce")
                        .WithMany("Pizzas")
                        .HasForeignKey("SauceId");

                    b.Navigation("Creator");

                    b.Navigation("Dough");

                    b.Navigation("Sauce");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.ShoppingCartPizza", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.Pizza", "BasePizza")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("BasePizzaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PizzaApp.Data.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Pizzas")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasePizza");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Topping", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.ToppingCategory", "ToppingCategory")
                        .WithMany("Toppings")
                        .HasForeignKey("ToppingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToppingCategory");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.User", b =>
                {
                    b.HasOne("PizzaApp.Data.Models.ShoppingCart", "ShoppingCart")
                        .WithOne("User")
                        .HasForeignKey("PizzaApp.Data.Models.User", "ShoppingCartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Address", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Dessert", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Dough", b =>
                {
                    b.Navigation("DoughOrders");

                    b.Navigation("Pizzas");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Drink", b =>
                {
                    b.Navigation("OrdersDrinks");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.MappingEntities.OrderPizza", b =>
                {
                    b.Navigation("Toppings");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Order", b =>
                {
                    b.Navigation("OrderDeserts");

                    b.Navigation("OrderDrinks");

                    b.Navigation("OrderPizzas");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Pizza", b =>
                {
                    b.Navigation("FavoritedBy");

                    b.Navigation("Orders");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("Toppings");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Sauce", b =>
                {
                    b.Navigation("Pizzas");

                    b.Navigation("SauceOrders");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.ShoppingCart", b =>
                {
                    b.Navigation("Desserts");

                    b.Navigation("Drinks");

                    b.Navigation("Pizzas");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("PizzaApp.Data.Models.Topping", b =>
                {
                    b.Navigation("PizzasToppings");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.ToppingCategory", b =>
                {
                    b.Navigation("Toppings");
                });

            modelBuilder.Entity("PizzaApp.Data.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CreatedPizzas");

                    b.Navigation("FavoritePizzas");

                    b.Navigation("OrderHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
